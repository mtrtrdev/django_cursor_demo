---
description: 
globs: 
alwaysApply: true
---
# 開発ドキュメント

本ドキュメントは、在庫管理システムの開発におけるルール、アプリケーション構造の概要、およびコーディング規約を定めます。
**アプリケーションの具体的な機能要件、データモデル、UI/UX、およびシステム構成の詳細については、`doc/document.md` を参照してください。**

## 1. 開発ルール

### 1.1. 基本原則
*   **シンプルさ:** コードは常にシンプルで理解しやすいものにすることを目指します。複雑なロジックは避け、小さなモジュールに分割します。
*   **再利用性:** 共通の機能は汎用的なコンポーネントとして設計し、コードの重複を避けます。
*   **保守性:** 将来的な変更や拡張が容易になるよう、クリーンなコードを記述し、適切なコメントとドキュメントを付与します。
*   **テスト容易性:** 各機能はテストが容易になるように設計し、可能な限りユニットテストを記述します。

### 1.2. コミット規約
*   **コミットメッセージ:** コミットメッセージは、変更内容を簡潔かつ明確に記述します。
    *   `feat:` (新機能)
    *   `fix:` (バグ修正)
    *   `docs:` (ドキュメントのみの変更)
    *   `style:` (コードのフォーマット、セミコロンなど。ロジックの変更なし)
    *   `refactor:` (リファクタリング。機能変更なし)
    *   `test:` (テストの追加、修正)
    *   `chore:` (ビルドプロセスや補助ツールの変更など)
*   **例:** `feat: 在庫アイテム一覧表示機能を追加`
*   **粒度:** 一つのコミットには一つの論理的な変更のみを含めるようにします。

### 1.3. ブランチ戦略
*   `main` ブランチは常に安定版とします。
*   新機能やバグ修正は、`feature/機能名` や `bugfix/課題番号` のようなフィーチャーブランチで開発します。
*   開発が完了したら、プルリクエストを作成し、レビュー後に `main` ブランチにマージします。

## 2. アプリケーション構造の概要

本アプリケーションはDjangoのMVT (Model-View-Template) パターンに従います。詳細なファイル構成や各ファイルの役割については、**`doc/document.md` の「6.3. アプリケーション構造」セクションを必ず参照してください。**

主要なディレクトリと役割は以下の通りです。

*   `inventory_system/`: Djangoプロジェクトのルートディレクトリ。プロジェクト全体の基本的な設定を格納します。
*   `stock/`: 在庫管理アプリケーションのディレクトリ。モデル、ビュー、フォーム、テンプレートなど、アプリケーション固有のロジックが配置されます。
    *   `models.py`: データベースのデータ構造（モデル）を定義します。
    *   `views.py`: ビジネスロジックを処理し、HTTPリクエストに応答する「コントローラー」の役割を担います。
    *   `forms.py`: ユーザー入力のバリデーションとHTMLフォームの生成を扱います。
    *   `urls.py`: `stock` アプリケーション内のURLルーティングを定義します。
    *   `templates/stock/`: HTMLテンプレートファイルを格納します。

## 3. コーディング規約

### 3.1. Python (Django)
*   **PEP 8:** Pythonの公式スタイルガイドPEP 8に準拠します。
    *   インデントはスペース4つを使用します。
    *   行の長さは最大79文字とします。
    *   命名規則:
        *   変数、関数、メソッド: `snake_case` (例: `item_name`)
        *   クラス: `PascalCase` (例: `ItemManager`)
        *   定数: `UPPER_SNAKE_CASE` (例: `MAX_LENGTH`)
*   **クラスベースビュー vs 関数ベースビュー:** 可能であれば、Djangoのクラスベースビューを使用し、コードの再利用性と可読性を高めます。
*   **クエリセット:** データベースアクセスにはDjango ORMのクエリセットを積極的に使用し、生のSQLは避けます。
*   **コメント:** 複雑なロジックや特定の意図がある箇所には、簡潔かつ分かりやすいコメントを記述します。Docstringを用いて関数やクラスの目的、引数、戻り値を記述します。

### 3.2. HTML/CSS
*   **セマンティックHTML:** HTMLはセマンティックなマークアップを心がけ、要素の持つ意味を正しく使用します。
*   **CSSの記述:**
    *   クラス名には `kebab-case` を使用します (例: `item-list-table`)。
    *   CSSプロパティの順序はアルファベット順にすることを推奨します。
    *   IDセレクタは極力避け、クラスセレクタを使用します。
*   **可読性:** インデントを適切に使用し、CSSコードの可読性を高めます。

### 3.3. バリデーション
*   ユーザーからの入力は、常にバックエンドで厳密にバリデーションを行います。
*   Djangoのフォームクラス（`forms.Form` または `forms.ModelForm`）のバリデーション機能を最大限に活用します。
*   フロントエンドでのバリデーションは、ユーザー体験向上のための補助的なものと位置づけ、セキュリティの要件はバックエンドで満たします。

### 3.4. エラーハンドリング
*   ユーザーには分かりやすいエラーメッセージを表示し、適切な操作を促します。
*   予期せぬエラーは適切にログに出力し、デバッグしやすい情報を含めます。

---

**本ドキュメントと `doc/document.md` は、相互に参照しながら開発を進める必要があります。**